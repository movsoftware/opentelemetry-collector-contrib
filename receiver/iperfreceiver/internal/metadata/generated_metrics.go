// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/filter"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

var MetricsInfo = metricsInfo{
	IperfBandwidth: metricInfo{
		Name: "iperf.bandwidth",
	},
	IperfCPUUtilization: metricInfo{
		Name: "iperf.cpu.utilization",
	},
	IperfCwnd: metricInfo{
		Name: "iperf.cwnd",
	},
	IperfJitter: metricInfo{
		Name: "iperf.jitter",
	},
	IperfPacketLoss: metricInfo{
		Name: "iperf.packet_loss",
	},
	IperfRetransmits: metricInfo{
		Name: "iperf.retransmits",
	},
	IperfRtt: metricInfo{
		Name: "iperf.rtt",
	},
	IperfTestDuration: metricInfo{
		Name: "iperf.test.duration",
	},
	IperfTestError: metricInfo{
		Name: "iperf.test.error",
	},
	IperfTransfer: metricInfo{
		Name: "iperf.transfer",
	},
}

type metricsInfo struct {
	IperfBandwidth      metricInfo
	IperfCPUUtilization metricInfo
	IperfCwnd           metricInfo
	IperfJitter         metricInfo
	IperfPacketLoss     metricInfo
	IperfRetransmits    metricInfo
	IperfRtt            metricInfo
	IperfTestDuration   metricInfo
	IperfTestError      metricInfo
	IperfTransfer       metricInfo
}

type metricInfo struct {
	Name string
}

type metricIperfBandwidth struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills iperf.bandwidth metric with initial data.
func (m *metricIperfBandwidth) init() {
	m.data.SetName("iperf.bandwidth")
	m.data.SetDescription("Network bandwidth measured during the test")
	m.data.SetUnit("bit/s")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricIperfBandwidth) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string, iperfTestDirectionAttributeValue string, iperfTestStreamsAttributeValue int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("iperf.test.protocol", iperfTestProtocolAttributeValue)
	dp.Attributes().PutStr("iperf.test.direction", iperfTestDirectionAttributeValue)
	dp.Attributes().PutInt("iperf.test.streams", iperfTestStreamsAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricIperfBandwidth) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricIperfBandwidth) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricIperfBandwidth(cfg MetricConfig) metricIperfBandwidth {
	m := metricIperfBandwidth{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricIperfCPUUtilization struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills iperf.cpu.utilization metric with initial data.
func (m *metricIperfCPUUtilization) init() {
	m.data.SetName("iperf.cpu.utilization")
	m.data.SetDescription("CPU utilization during the test")
	m.data.SetUnit("%")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricIperfCPUUtilization) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string, iperfTestDirectionAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("iperf.test.protocol", iperfTestProtocolAttributeValue)
	dp.Attributes().PutStr("iperf.test.direction", iperfTestDirectionAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricIperfCPUUtilization) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricIperfCPUUtilization) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricIperfCPUUtilization(cfg MetricConfig) metricIperfCPUUtilization {
	m := metricIperfCPUUtilization{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricIperfCwnd struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills iperf.cwnd metric with initial data.
func (m *metricIperfCwnd) init() {
	m.data.SetName("iperf.cwnd")
	m.data.SetDescription("TCP congestion window size")
	m.data.SetUnit("By")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricIperfCwnd) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, iperfTestProtocolAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("iperf.test.protocol", iperfTestProtocolAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricIperfCwnd) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricIperfCwnd) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricIperfCwnd(cfg MetricConfig) metricIperfCwnd {
	m := metricIperfCwnd{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricIperfJitter struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills iperf.jitter metric with initial data.
func (m *metricIperfJitter) init() {
	m.data.SetName("iperf.jitter")
	m.data.SetDescription("Jitter measured during the test (UDP only)")
	m.data.SetUnit("ms")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricIperfJitter) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string, iperfTestDirectionAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("iperf.test.protocol", iperfTestProtocolAttributeValue)
	dp.Attributes().PutStr("iperf.test.direction", iperfTestDirectionAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricIperfJitter) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricIperfJitter) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricIperfJitter(cfg MetricConfig) metricIperfJitter {
	m := metricIperfJitter{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricIperfPacketLoss struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills iperf.packet_loss metric with initial data.
func (m *metricIperfPacketLoss) init() {
	m.data.SetName("iperf.packet_loss")
	m.data.SetDescription("Percentage of packets lost (UDP only)")
	m.data.SetUnit("%")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricIperfPacketLoss) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string, iperfTestDirectionAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("iperf.test.protocol", iperfTestProtocolAttributeValue)
	dp.Attributes().PutStr("iperf.test.direction", iperfTestDirectionAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricIperfPacketLoss) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricIperfPacketLoss) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricIperfPacketLoss(cfg MetricConfig) metricIperfPacketLoss {
	m := metricIperfPacketLoss{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricIperfRetransmits struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills iperf.retransmits metric with initial data.
func (m *metricIperfRetransmits) init() {
	m.data.SetName("iperf.retransmits")
	m.data.SetDescription("Number of TCP retransmissions (TCP only)")
	m.data.SetUnit("{retransmission}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricIperfRetransmits) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, iperfTestProtocolAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("iperf.test.protocol", iperfTestProtocolAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricIperfRetransmits) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricIperfRetransmits) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricIperfRetransmits(cfg MetricConfig) metricIperfRetransmits {
	m := metricIperfRetransmits{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricIperfRtt struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills iperf.rtt metric with initial data.
func (m *metricIperfRtt) init() {
	m.data.SetName("iperf.rtt")
	m.data.SetDescription("Round trip time")
	m.data.SetUnit("ms")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricIperfRtt) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("iperf.test.protocol", iperfTestProtocolAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricIperfRtt) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricIperfRtt) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricIperfRtt(cfg MetricConfig) metricIperfRtt {
	m := metricIperfRtt{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricIperfTestDuration struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills iperf.test.duration metric with initial data.
func (m *metricIperfTestDuration) init() {
	m.data.SetName("iperf.test.duration")
	m.data.SetDescription("Duration of the iperf test")
	m.data.SetUnit("s")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricIperfTestDuration) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("iperf.test.protocol", iperfTestProtocolAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricIperfTestDuration) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricIperfTestDuration) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricIperfTestDuration(cfg MetricConfig) metricIperfTestDuration {
	m := metricIperfTestDuration{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricIperfTestError struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills iperf.test.error metric with initial data.
func (m *metricIperfTestError) init() {
	m.data.SetName("iperf.test.error")
	m.data.SetDescription("Records errors occurring during iperf test")
	m.data.SetUnit("{error}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricIperfTestError) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, errorMessageAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("error.message", errorMessageAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricIperfTestError) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricIperfTestError) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricIperfTestError(cfg MetricConfig) metricIperfTestError {
	m := metricIperfTestError{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricIperfTransfer struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills iperf.transfer metric with initial data.
func (m *metricIperfTransfer) init() {
	m.data.SetName("iperf.transfer")
	m.data.SetDescription("Total bytes transferred during the test")
	m.data.SetUnit("By")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricIperfTransfer) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, iperfTestProtocolAttributeValue string, iperfTestDirectionAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("iperf.test.protocol", iperfTestProtocolAttributeValue)
	dp.Attributes().PutStr("iperf.test.direction", iperfTestDirectionAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricIperfTransfer) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricIperfTransfer) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricIperfTransfer(cfg MetricConfig) metricIperfTransfer {
	m := metricIperfTransfer{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                         MetricsBuilderConfig // config of the metrics builder.
	startTime                      pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity                int                  // maximum observed number of metrics per resource.
	metricsBuffer                  pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                      component.BuildInfo  // contains version information.
	resourceAttributeIncludeFilter map[string]filter.Filter
	resourceAttributeExcludeFilter map[string]filter.Filter
	metricIperfBandwidth           metricIperfBandwidth
	metricIperfCPUUtilization      metricIperfCPUUtilization
	metricIperfCwnd                metricIperfCwnd
	metricIperfJitter              metricIperfJitter
	metricIperfPacketLoss          metricIperfPacketLoss
	metricIperfRetransmits         metricIperfRetransmits
	metricIperfRtt                 metricIperfRtt
	metricIperfTestDuration        metricIperfTestDuration
	metricIperfTestError           metricIperfTestError
	metricIperfTransfer            metricIperfTransfer
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}
func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                         mbc,
		startTime:                      pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                  pmetric.NewMetrics(),
		buildInfo:                      settings.BuildInfo,
		metricIperfBandwidth:           newMetricIperfBandwidth(mbc.Metrics.IperfBandwidth),
		metricIperfCPUUtilization:      newMetricIperfCPUUtilization(mbc.Metrics.IperfCPUUtilization),
		metricIperfCwnd:                newMetricIperfCwnd(mbc.Metrics.IperfCwnd),
		metricIperfJitter:              newMetricIperfJitter(mbc.Metrics.IperfJitter),
		metricIperfPacketLoss:          newMetricIperfPacketLoss(mbc.Metrics.IperfPacketLoss),
		metricIperfRetransmits:         newMetricIperfRetransmits(mbc.Metrics.IperfRetransmits),
		metricIperfRtt:                 newMetricIperfRtt(mbc.Metrics.IperfRtt),
		metricIperfTestDuration:        newMetricIperfTestDuration(mbc.Metrics.IperfTestDuration),
		metricIperfTestError:           newMetricIperfTestError(mbc.Metrics.IperfTestError),
		metricIperfTransfer:            newMetricIperfTransfer(mbc.Metrics.IperfTransfer),
		resourceAttributeIncludeFilter: make(map[string]filter.Filter),
		resourceAttributeExcludeFilter: make(map[string]filter.Filter),
	}
	if mbc.ResourceAttributes.IperfTargetHost.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["iperf.target.host"] = filter.CreateFilter(mbc.ResourceAttributes.IperfTargetHost.MetricsInclude)
	}
	if mbc.ResourceAttributes.IperfTargetHost.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["iperf.target.host"] = filter.CreateFilter(mbc.ResourceAttributes.IperfTargetHost.MetricsExclude)
	}
	if mbc.ResourceAttributes.IperfTargetPort.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["iperf.target.port"] = filter.CreateFilter(mbc.ResourceAttributes.IperfTargetPort.MetricsInclude)
	}
	if mbc.ResourceAttributes.IperfTargetPort.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["iperf.target.port"] = filter.CreateFilter(mbc.ResourceAttributes.IperfTargetPort.MetricsExclude)
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// NewResourceBuilder returns a new resource builder that should be used to build a resource associated with for the emitted metrics.
func (mb *MetricsBuilder) NewResourceBuilder() *ResourceBuilder {
	return NewResourceBuilder(mb.config.ResourceAttributes)
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName(ScopeName)
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricIperfBandwidth.emit(ils.Metrics())
	mb.metricIperfCPUUtilization.emit(ils.Metrics())
	mb.metricIperfCwnd.emit(ils.Metrics())
	mb.metricIperfJitter.emit(ils.Metrics())
	mb.metricIperfPacketLoss.emit(ils.Metrics())
	mb.metricIperfRetransmits.emit(ils.Metrics())
	mb.metricIperfRtt.emit(ils.Metrics())
	mb.metricIperfTestDuration.emit(ils.Metrics())
	mb.metricIperfTestError.emit(ils.Metrics())
	mb.metricIperfTransfer.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}
	for attr, filter := range mb.resourceAttributeIncludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && !filter.Matches(val.AsString()) {
			return
		}
	}
	for attr, filter := range mb.resourceAttributeExcludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && filter.Matches(val.AsString()) {
			return
		}
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordIperfBandwidthDataPoint adds a data point to iperf.bandwidth metric.
func (mb *MetricsBuilder) RecordIperfBandwidthDataPoint(ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string, iperfTestDirectionAttributeValue string, iperfTestStreamsAttributeValue int64) {
	mb.metricIperfBandwidth.recordDataPoint(mb.startTime, ts, val, iperfTestProtocolAttributeValue, iperfTestDirectionAttributeValue, iperfTestStreamsAttributeValue)
}

// RecordIperfCPUUtilizationDataPoint adds a data point to iperf.cpu.utilization metric.
func (mb *MetricsBuilder) RecordIperfCPUUtilizationDataPoint(ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string, iperfTestDirectionAttributeValue string) {
	mb.metricIperfCPUUtilization.recordDataPoint(mb.startTime, ts, val, iperfTestProtocolAttributeValue, iperfTestDirectionAttributeValue)
}

// RecordIperfCwndDataPoint adds a data point to iperf.cwnd metric.
func (mb *MetricsBuilder) RecordIperfCwndDataPoint(ts pcommon.Timestamp, val int64, iperfTestProtocolAttributeValue string) {
	mb.metricIperfCwnd.recordDataPoint(mb.startTime, ts, val, iperfTestProtocolAttributeValue)
}

// RecordIperfJitterDataPoint adds a data point to iperf.jitter metric.
func (mb *MetricsBuilder) RecordIperfJitterDataPoint(ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string, iperfTestDirectionAttributeValue string) {
	mb.metricIperfJitter.recordDataPoint(mb.startTime, ts, val, iperfTestProtocolAttributeValue, iperfTestDirectionAttributeValue)
}

// RecordIperfPacketLossDataPoint adds a data point to iperf.packet_loss metric.
func (mb *MetricsBuilder) RecordIperfPacketLossDataPoint(ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string, iperfTestDirectionAttributeValue string) {
	mb.metricIperfPacketLoss.recordDataPoint(mb.startTime, ts, val, iperfTestProtocolAttributeValue, iperfTestDirectionAttributeValue)
}

// RecordIperfRetransmitsDataPoint adds a data point to iperf.retransmits metric.
func (mb *MetricsBuilder) RecordIperfRetransmitsDataPoint(ts pcommon.Timestamp, val int64, iperfTestProtocolAttributeValue string) {
	mb.metricIperfRetransmits.recordDataPoint(mb.startTime, ts, val, iperfTestProtocolAttributeValue)
}

// RecordIperfRttDataPoint adds a data point to iperf.rtt metric.
func (mb *MetricsBuilder) RecordIperfRttDataPoint(ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string) {
	mb.metricIperfRtt.recordDataPoint(mb.startTime, ts, val, iperfTestProtocolAttributeValue)
}

// RecordIperfTestDurationDataPoint adds a data point to iperf.test.duration metric.
func (mb *MetricsBuilder) RecordIperfTestDurationDataPoint(ts pcommon.Timestamp, val float64, iperfTestProtocolAttributeValue string) {
	mb.metricIperfTestDuration.recordDataPoint(mb.startTime, ts, val, iperfTestProtocolAttributeValue)
}

// RecordIperfTestErrorDataPoint adds a data point to iperf.test.error metric.
func (mb *MetricsBuilder) RecordIperfTestErrorDataPoint(ts pcommon.Timestamp, val int64, errorMessageAttributeValue string) {
	mb.metricIperfTestError.recordDataPoint(mb.startTime, ts, val, errorMessageAttributeValue)
}

// RecordIperfTransferDataPoint adds a data point to iperf.transfer metric.
func (mb *MetricsBuilder) RecordIperfTransferDataPoint(ts pcommon.Timestamp, val int64, iperfTestProtocolAttributeValue string, iperfTestDirectionAttributeValue string) {
	mb.metricIperfTransfer.recordDataPoint(mb.startTime, ts, val, iperfTestProtocolAttributeValue, iperfTestDirectionAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
