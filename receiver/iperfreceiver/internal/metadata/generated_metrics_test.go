// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: testDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIperfBandwidthDataPoint(ts, 1, "iperf.test.protocol-val", "iperf.test.direction-val", 18)

			allMetricsCount++
			mb.RecordIperfCPUUtilizationDataPoint(ts, 1, "iperf.test.protocol-val", "iperf.test.direction-val")

			allMetricsCount++
			mb.RecordIperfCwndDataPoint(ts, 1, "iperf.test.protocol-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIperfJitterDataPoint(ts, 1, "iperf.test.protocol-val", "iperf.test.direction-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIperfPacketLossDataPoint(ts, 1, "iperf.test.protocol-val", "iperf.test.direction-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIperfRetransmitsDataPoint(ts, 1, "iperf.test.protocol-val")

			allMetricsCount++
			mb.RecordIperfRttDataPoint(ts, 1, "iperf.test.protocol-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIperfTestDurationDataPoint(ts, 1, "iperf.test.protocol-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIperfTestErrorDataPoint(ts, 1, "error.message-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIperfTransferDataPoint(ts, 1, "iperf.test.protocol-val", "iperf.test.direction-val")

			rb := mb.NewResourceBuilder()
			rb.SetIperfTargetHost("iperf.target.host-val")
			rb.SetIperfTargetPort(17)
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "iperf.bandwidth":
					assert.False(t, validatedMetrics["iperf.bandwidth"], "Found a duplicate in the metrics slice: iperf.bandwidth")
					validatedMetrics["iperf.bandwidth"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Network bandwidth measured during the test", ms.At(i).Description())
					assert.Equal(t, "bit/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("iperf.test.protocol")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("iperf.test.direction")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.direction-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("iperf.test.streams")
					assert.True(t, ok)
					assert.EqualValues(t, 18, attrVal.Int())
				case "iperf.cpu.utilization":
					assert.False(t, validatedMetrics["iperf.cpu.utilization"], "Found a duplicate in the metrics slice: iperf.cpu.utilization")
					validatedMetrics["iperf.cpu.utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU utilization during the test", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("iperf.test.protocol")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("iperf.test.direction")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.direction-val", attrVal.Str())
				case "iperf.cwnd":
					assert.False(t, validatedMetrics["iperf.cwnd"], "Found a duplicate in the metrics slice: iperf.cwnd")
					validatedMetrics["iperf.cwnd"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "TCP congestion window size", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("iperf.test.protocol")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.protocol-val", attrVal.Str())
				case "iperf.jitter":
					assert.False(t, validatedMetrics["iperf.jitter"], "Found a duplicate in the metrics slice: iperf.jitter")
					validatedMetrics["iperf.jitter"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Jitter measured during the test (UDP only)", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("iperf.test.protocol")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("iperf.test.direction")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.direction-val", attrVal.Str())
				case "iperf.packet_loss":
					assert.False(t, validatedMetrics["iperf.packet_loss"], "Found a duplicate in the metrics slice: iperf.packet_loss")
					validatedMetrics["iperf.packet_loss"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Percentage of packets lost (UDP only)", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("iperf.test.protocol")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("iperf.test.direction")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.direction-val", attrVal.Str())
				case "iperf.retransmits":
					assert.False(t, validatedMetrics["iperf.retransmits"], "Found a duplicate in the metrics slice: iperf.retransmits")
					validatedMetrics["iperf.retransmits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of TCP retransmissions (TCP only)", ms.At(i).Description())
					assert.Equal(t, "{retransmission}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("iperf.test.protocol")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.protocol-val", attrVal.Str())
				case "iperf.rtt":
					assert.False(t, validatedMetrics["iperf.rtt"], "Found a duplicate in the metrics slice: iperf.rtt")
					validatedMetrics["iperf.rtt"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Round trip time", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("iperf.test.protocol")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.protocol-val", attrVal.Str())
				case "iperf.test.duration":
					assert.False(t, validatedMetrics["iperf.test.duration"], "Found a duplicate in the metrics slice: iperf.test.duration")
					validatedMetrics["iperf.test.duration"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Duration of the iperf test", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("iperf.test.protocol")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.protocol-val", attrVal.Str())
				case "iperf.test.error":
					assert.False(t, validatedMetrics["iperf.test.error"], "Found a duplicate in the metrics slice: iperf.test.error")
					validatedMetrics["iperf.test.error"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Records errors occurring during iperf test", ms.At(i).Description())
					assert.Equal(t, "{error}", ms.At(i).Unit())
					assert.False(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("error.message")
					assert.True(t, ok)
					assert.Equal(t, "error.message-val", attrVal.Str())
				case "iperf.transfer":
					assert.False(t, validatedMetrics["iperf.transfer"], "Found a duplicate in the metrics slice: iperf.transfer")
					validatedMetrics["iperf.transfer"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total bytes transferred during the test", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("iperf.test.protocol")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("iperf.test.direction")
					assert.True(t, ok)
					assert.Equal(t, "iperf.test.direction-val", attrVal.Str())
				}
			}
		})
	}
}
